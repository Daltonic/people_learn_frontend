name: Frontend Deployment to Ubuntu VPS

on:
  push:
    branches:
      - main # Trigger on push to main branch

jobs:
  prepare_environment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Ensure target directory exists on VPS
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ ! -d "/dockerized/containers/dappmentors_frontend" ]; then
              mkdir -p /dockerized/containers/dappmentors_frontend
            fi

      - name: Copy Github files to VPS
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./"
          target: "/dockerized/containers/dappmentors_frontend"

      - name: Create .env file
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cat << EOF > /dockerized/containers/dappmentors_frontend/.env
            NEXT_PUBLIC_BACKEND_URI=${{ secrets.NEXT_PUBLIC_BACKEND_URI }}
            EOF

  build_image:
    needs: prepare_environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get the latest commit hash
        id: git_info
        run: echo ::set-output name=commit::$(git rev-parse HEAD)

      - name: Build Docker image with commit hash
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export COMMIT_HASH=${{ steps.git_info.outputs.commit }}
            cd /dockerized/containers/dappmentors_frontend
            docker build -t dma_frontend_image:$COMMIT_HASH .

  stop_and_start_container:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Stop and remove old Docker containers
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker stop dma_frontend_instance || true
            docker rm dma_frontend_instance || true

      - name: Run new Docker container
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Retrieve the tag of the most recent Docker image
            LATEST_IMAGE_TAG=$(docker images --filter=reference='dma_frontend_image*' --sort=created --format "{{.Tag}}" | head -n  1)
            echo "Recent tag: $LATEST_IMAGE_TAG"
            # Run the Docker container with the latest image tag
            docker run \
              -d \
              --name dma_frontend_instance \
              -p   3000:3000 \
              -v dma_frontend_volume:/data \
              dma_frontend_image:$LATEST_IMAGE_TAG

  clean_up_except_the_latest:
    needs: stop_and_start_container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Clean up previous Docker images except the latest
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Get the latest image ID
            latest_image_id=$(docker images 'dma_frontend_image*' --format "{{.ID}}" | head -n1)
            # Remove all images except the latest one
            docker images 'dma_frontend_image*' --format "{{.ID}}" | grep -v "$latest_image_id" | xargs --no-run-if-empty docker rmi

      - name: Remove untagged Docker images
        uses: appleboy/ssh-action@v0.1.3
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USERNAME }}
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            script: |
                docker rmi $(docker images -f "dangling=true" -q) || true